# ECOR 1042 Lab 4 - Individual submission for test2 function

# import load_data module here
from load_data import *

# Update "" with your name (e.g., Cristina Ruiz Martin)
__author__ = "Abigale Cooper"

# Update "" with your student number (e.g., 100100100)
__student_number__ = "101334074"

# Update "" with your team (e.g. T-102, use the notation provided in the example)
__team__ = "T-015"

# ==========================================#
# Do not modify the code alreayd provided.


def test_return_list_correct_length() -> list[int]:
    # Complete the function with your test cases
    file = 'student-test.csv'
    test = [0, 0]

    # test that student_school_list returns a list with the correct length (3 different test cases required)
    schools = ["GP", "ML", "MS"]
    length = [3, 0, 4]
    for i in range(len(schools)):
        try:
            assert len(student_school_list(file, schools[i])
                       ) == length[i], ("wrong length for school list. Test ", i, " Failed. ")
            test[0] += 1
        except AssertionError as error:
            test[1] += 1

    # test that student_age_list returns a list  with the correct length (3 different test cases required)
    age = [17, 18, 2]
    length = [6, 4, 0]
    for i in range(len(age)):
        try:
            assert len(student_age_list(file, age[i])
                       ) == length[i], ("wrong length for age list. Test ", i, " Failed. ")
            test[0] += 1
        except AssertionError as error:
            test[1] += 1

    # test that student_health_list returns a list  with the correct length (3 different test cases required)
    health = [3, 10, 5]
    length = [8, 0, 3]
    for i in range(len(health)):
        try:
            assert len(student_health_list(file, health[i])
                       ) == length[i], ("wrong length for health list. Test ", i, " Failed. ")
            test[0] += 1
        except AssertionError as error:
            test[1] += 1

    # test that student_failures_list returns a list   with the correct length(3 different test cases required)
    failures = [2, 0, 4]
    length = [2, 11, 0]
    for i in range(len(failures)):
        try:
            assert len(student_failures_list(file, failures[i])
                       ) == length[i], ("wrong length for failures list. Test ", i, " Failed. ")
            test[0] += 1
        except AssertionError as error:
            test[1] += 1

    # test that load_data returns a list  with the correct length (6 different test cases required)

    loadData = [{"Age": 18}, {"Health": 1}, {"Health": 2},
                {"School": "GP"}, {"Failures": 1}, {"All": 0}]
    length = [4, 1, 0, 3, 1, 15]
    for i in range(len(loadData)):
        try:
            assert len(load_data(file, loadData[i])
                       ) == length[i], ("wrong length for load_data list. Test ", i, " Failed. ")
            test[0] += 1
        except AssertionError as error:
            test[1] += 1
           

    # test that add_average returns a list   with the correct length (3 different test cases required)
    average = [[{'School': 'GP', 'ID': 10, 'Age': 18, 'StudyTime': 2.5, 'Failures': 0, 'Health': 3, 'Absences': 6, 'FallGrade': 5, 'WinterGrade': 6}], [{'School': 'MB', 'ID': 21, 'Age': 16, 'StudyTime': 2,
                                                                                                                                                         'Failures': 0, 'Health': 3, 'Absences': 12, 'FallGrade': 5, 'WinterGrade': 5}], []]
    length = [1, 1, 0]
    for i in range(len(average)):
        try:
            assert len(add_average(average[i])
                       ) == length[i], ("wrong length for add average list. Test ", i, " Failed. ")
            test[0] += 1
        except AssertionError as error:
            test[1] += 1

    # return the a list with the number of tests that passed and the number that failed

    return test

    # Do NOT include a main script in your submission


   


       
   
